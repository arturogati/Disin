"""
main.py (–Ø–¥—Ä–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
–õ–æ–≥–∏–∫–∞ workflow:

–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–û–±–º–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ 1inch

–î–µ–ø–æ–∑–∏—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–ª

–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:

python
async def one_click_deposit(user_address, pool_address, amount_eth):
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    # 2. –°–≤–∞–ø —á–µ—Ä–µ–∑ 1inch
    # 3. –î–µ–ø–æ–∑–∏—Ç –≤ –ø—É–ª
    # 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –µ–¥–∏–Ω—ã–π pipeline.

"""


#!/usr/bin/env python3
import asyncio
import sys
from web3 import Web3
from eth_account import Account
from typing import Dict, Any

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ ---
IS_DEMO = "--demo" in sys.argv

if IS_DEMO:
    print("\nüîπ –î–ï–ú–û-–†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫-–¥–∞–Ω–Ω—ã–µ")
    from tests.mocks.blockchain import get_mock_web3
    from tests.mocks.oneinch import mock_get_swap_data as get_swap_data
    w3 = get_mock_web3()
else:
    from core.blockchain import w3
    from api.oneinch import get_swap_data
    from config.settings import settings

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ETH_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
USDC_ADDRESS = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
async def one_click_deposit(
    user_address: str,
    pool_address: str,
    amount_eth: float
) -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–≤–∞–ø–æ–º"""
    
    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤
    if not Web3.is_address(user_address):
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {user_address}")
    
    if not Web3.is_address(pool_address):
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø—É–ª–∞: {pool_address}")

    checksum_address = Web3.to_checksum_address(user_address)

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance_wei = w3.eth.get_balance(checksum_address)
    balance_eth = Web3.from_wei(balance_wei, 'ether')
    
    print(f"\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å... {balance_eth:.4f} ETH")
    if balance_eth < amount_eth:
        raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH. –ù—É–∂–Ω–æ: {amount_eth}, –µ—Å—Ç—å: {balance_eth}")

    # 3. –û–±–º–µ–Ω ETH ‚Üí USDC —á–µ—Ä–µ–∑ 1inch
    print(f"2. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±–º–µ–Ω {amount_eth} ETH –Ω–∞ USDC...")
    swap_data = await get_swap_data(
        from_token=ETH_ADDRESS,
        to_token=USDC_ADDRESS,
        amount=Web3.to_wei(amount_eth, 'ether'),
        user_address=checksum_address
    )

    # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
    print(f"3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤ –ø—É–ª {pool_address[:10]}...")
    tx_data = {
        'to': swap_data['tx']['to'],
        'data': swap_data['tx']['data'],
        'value': int(swap_data['tx']['value']),
        'gas': int(swap_data['tx']['gas']),
        'nonce': w3.eth.get_transaction_count(checksum_address),
        'chainId': 1  # Ethereum Mainnet
    }

    # 5. –ü–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ (–∏–ª–∏ –º–æ–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ)
    if IS_DEMO:
        tx_hash = "0x" + "mock_hash".ljust(64, '0')
    else:
        signed_tx = Account.sign_transaction(tx_data, settings.PRIVATE_KEY)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction).hex()

    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_hash}")
    return {
        'status': 'success',
        'tx_hash': tx_hash,
        'amount_eth': amount_eth,
        'pool_address': pool_address
    }

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    params = {
        'user_address': "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",  # –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        'pool_address': "0x5777d92f208679DB4b9778590Fa3CAB3aC9e2168",  # –ü—Ä–∏–º–µ—Ä –ø—É–ª–∞ (DAI-USDC)
        'amount_eth': 0.01
    }

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) > 1 and not sys.argv[1] == "--demo":
        params['user_address'] = sys.argv[1]
    if len(sys.argv) > 2 and not sys.argv[2] == "--demo":
        params['pool_address'] = sys.argv[2]
    if len(sys.argv) > 3 and not sys.argv[3] == "--demo":
        params['amount_eth'] = float(sys.argv[3])

    try:
        result = asyncio.run(one_click_deposit(**params))
        if IS_DEMO:
            print("\n[–î–ï–ú–û] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:", result)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if not IS_DEMO:
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("- –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ ETH –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            print("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤")
            print("- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
